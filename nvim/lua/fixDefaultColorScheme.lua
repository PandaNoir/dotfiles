local links = {
  -- 参考: tokyonight.nvim の link の設定
  { "WinBar",                                 "StatusLine" },
  { "WinBarNC",                               "StatusLineNC" },
  { "Delimiter",                              "Special" },
  { "dosIniLabel",                            "@property" },
  { "@annotation",                            "PreProc" },
  { "@attribute",                             "PreProc" },
  { "@boolean",                               "Boolean" },
  { "@character",                             "Character" },
  { "@character.special",                     "SpecialChar" },
  { "@comment",                               "Comment" },
  { "@keyword.conditional",                   "Conditional" },
  { "@constant",                              "Constant" },
  { "@constant.builtin",                      "Special" },
  { "@constant.macro",                        "Define" },
  { "@keyword.debug",                         "Debug" },
  { "@keyword.directive.define",              "Define" },
  { "@keyword.exception",                     "Exception" },
  { "@number.float",                          "Float" },
  { "@function",                              "Function" },
  { "@function.builtin",                      "Special" },
  { "@function.call",                         "@function" },
  { "@function.macro",                        "Macro" },
  { "@keyword.import",                        "Include" },
  { "@keyword.coroutine",                     "@keyword" },
  { "@keyword.operator",                      "@operator" },
  { "@keyword.return",                        "@keyword" },
  { "@function.method",                       "Function" },
  { "@function.method.call",                  "@function.method" },
  { "@namespace.builtin",                     "@variable.builtin" },
  { "@number",                                "Number" },
  { "@keyword.directive",                     "PreProc" },
  { "@keyword.repeat",                        "Repeat" },
  { "@keyword.storage",                       "StorageClass" },
  { "@string",                                "String" },
  { "@markup.link.label",                     "SpecialChar" },
  { "@markup.link.label.symbol",              "Identifier" },
  { "@tag",                                   "Label" },
  { "@tag.attribute",                         "@property" },
  { "@tag.delimiter",                         "Delimiter" },
  { "@markup",                                "@none" },
  { "@markup.environment",                    "Macro" },
  { "@markup.environment.name",               "Type" },
  { "@markup.raw",                            "String" },
  { "@markup.math",                           "Special" },
  { "@markup.heading",                        "Title" },
  { "@markup.link.url",                       "Underlined" },
  { "@type",                                  "Type" },
  { "@type.definition",                       "Typedef" },
  { "@type.qualifier",                        "@keyword" },
  { "@diff.plus",                             "DiffAdd" },
  { "@diff.minus",                            "DiffDelete" },
  { "@diff.delta",                            "DiffChange" },
  { "@module",                                "Include" },
  { "@lsp.type.boolean",                      "@boolean" },
  { "@lsp.type.builtinType",                  "@type.builtin" },
  { "@lsp.type.comment",                      "@comment" },
  { "@lsp.type.decorator",                    "@attribute" },
  { "@lsp.type.deriveHelper",                 "@attribute" },
  { "@lsp.type.enum",                         "@type" },
  { "@lsp.type.enumMember",                   "@constant" },
  { "@lsp.type.escapeSequence",               "@string.escape" },
  { "@lsp.type.formatSpecifier",              "@markup.list" },
  { "@lsp.type.generic",                      "@variable" },
  { "@lsp.type.lifetime",                     "@keyword.storage" },
  { "@lsp.type.namespace",                    "@module" },
  { "@lsp.type.number",                       "@number" },
  { "@lsp.type.operator",                     "@operator" },
  { "@lsp.type.parameter",                    "@variable.parameter" },
  { "@lsp.type.property",                     "@property" },
  { "@lsp.type.selfKeyword",                  "@variable.builtin" },
  { "@lsp.type.selfTypeKeyword",              "@variable.builtin" },
  { "@lsp.type.string",                       "@string" },
  { "@lsp.type.typeAlias",                    "@type.definition" },
  { "@lsp.typemod.class.defaultLibrary",      "@type.builtin" },
  { "@lsp.typemod.enum.defaultLibrary",       "@type.builtin" },
  { "@lsp.typemod.enumMember.defaultLibrary", "@constant.builtin" },
  { "@lsp.typemod.function.defaultLibrary",   "@function.builtin" },
  { "@lsp.typemod.keyword.async",             "@keyword.coroutine" },
  { "@lsp.typemod.keyword.injected",          "@keyword" },
  { "@lsp.typemod.macro.defaultLibrary",      "@function.builtin" },
  { "@lsp.typemod.method.defaultLibrary",     "@function.builtin" },
  { "@lsp.typemod.operator.injected",         "@operator" },
  { "@lsp.typemod.string.injected",           "@string" },
  { "@lsp.typemod.struct.defaultLibrary",     "@type.builtin" },
  { "@lsp.typemod.variable.callable",         "@function" },
  { "@lsp.typemod.variable.defaultLibrary",   "@variable.builtin" },
  { "@lsp.typemod.variable.injected",         "@variable" },
  { "@lsp.typemod.variable.static",           "@constant" },
  { "@lsp.type.namespace.python",             "@variable" },
  { "DiagnosticWarning",                      "DiagnosticWarn" },
  { "DiagnosticInformation",                  "DiagnosticInfo" },
  { "AerialLine",                             "LspInlayHint" },
  { "YankyPut",                               "IncSearch" },
  { "YankyYanked",                            "IncSearch" },
  { "CurSearch",                              "IncSearch" },

  { "@keyword.import",                        "Special" },
  { "@keyword.export",                        "Identifier" },
  { "@keyword.tsx",                           "Identifier" },
  { "jsonKeyword",                            "Identifier" },
}

local fixDefaultColorScheme = function()
  vim.api.nvim_echo({ { 'called' } }, true, {})
  for _i, value in pairs(links) do
    vim.cmd(string.format('highlight link %s %s', value[1], value[2]))
  end
end

fixDefaultColorScheme()
vim.api.nvim_create_autocmd({ 'ColorScheme' }, {
  group = 'MyAutoCmd',
  pattern = 'default',
  callback = fixDefaultColorScheme
})
