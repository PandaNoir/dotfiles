[[plugins]]
repo = 'glepnir/lspsaga.nvim'
on_event = 'BufRead'
lua_add = '''
require("lspsaga").setup({})
'''
depends = ['nvim-web-devicons', 'nvim-treesitter']

[[plugins]]
repo = 'junegunn/fzf.vim'
on_cmd = [
  'Files',
  'ProjectFiles',
  'Buffers',
  'BLines',
  'History',
  'Tags',
  'BTags',
  'GFiles',
  'Ag',
  'Rg',
]
hook_add = '''
set rtp+=$XDG_CACHE_HOME/fzf
'''
hook_source = 'runtime! plugins/fzf.vim'

[[plugins]]
repo = 'lambdalisue/fern.vim'
on_cmd = ['Fern']
hook_add = '''
nnoremap <silent> <leader>s <Cmd>Fern . -drawer -reveal=% -toggle<CR>

function! s:init_fern() abort
  nnoremap <Plug>(fern-close-drawer) :<C-u>FernDo close -drawer -stay<CR>
  nmap <buffer> <Plug>(fern-action-open-and-close)
        \ <Plug>(fern-action-open)<Plug>(fern-close-drawer)
  nmap <buffer> <CR> <Plug>(fern-action-open-and-close)
endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END
'''
hook_source='''
let g:fern#default_hidden=1
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
on_source = ['fern.vim']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'chr4/nginx.vim'
on_ft = ['nginx']

[[plugins]]
repo = 'sbdchd/neoformat'
on_cmd = ['Neoformat']
on_ft = ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx', 'typescriptreact', 'vue']
hook_source = '''
let g:neoformat_try_node_exe = 1
let g:neoformat_enabled_javascript = ['prettier', 'jsbeautify']
command! -range=% Fmt :mkview | :<line1>,<line2>Neoformat | :loadview
augroup fmt
  autocmd!
  autocmd BufWritePre * Fmt
augroup END
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'BufRead'
hook_post_update = ':TSUpdate'
lua_source = '''
require'nvim-treesitter.configs'.setup {
  ensure_installed = {
    'javascript',
    'typescript',
    'tsx',
    'vue',
    'json',
    'html',
    'css',
    'scss',
    'markdown',
    'markdown_inline',
    'toml',
    'vim'
  },
  additional_vim_regex_highlighting = false,
  highlight = {
    enable = true,
    disable = {'c', 'help'},
  },
}
'''

[[plugins]]
repo = 'cohama/lexima.vim' # かっこの自動補完
on_event = 'InsertEnter'
hook_source = 'runtime! plugins/lexima.vim'


[[plugins]]
repo = 'kana/vim-textobj-user'
on_event = 'VimEnter'

[[plugins]]
repo = 'vim-scripts/surround.vim'
on_event = 'VimEnter'
hook_source = '''
nmap s ys
'''

[[plugins]]
repo = 'tpope/vim-repeat'
on_event = 'VimEnter'
hook_source = '''
" function s:execute_repeatable_macro(name) abort
function! Execute_repeatable_macro(name)
  const name = '@' .. a:name

  execute 'normal!' name
  silent! call repeat#set("\<Plug>macro_" .. a:name)
endfunction

for x in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
  execute 'nnoremap' '<silent>' ("<Plug>macro_" .. x) (":\<C-u>call Execute_repeatable_macro('" .. x .. "')\<CR>")
  execute 'nmap' ('@' .. x) ("<Plug>macro_" .. x)
endfor
'''

[[plugins]]
repo = 'justinmk/vim-sneak'
on_event = 'VimEnter'

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_event = 'VimEnter'
hook_source = '''
au MyAutoCmd VimEnter * nnoremap <silent> <Plug>RepeatTComment :TComment \| silent! call repeat#set("\<Plug>RepeatTComment")<CR>
au MyAutoCmd VimEnter * nmap <c-_><c-_> <Plug>RepeatTComment
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
on_event = 'BufRead'
hook_source = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=none ctermbg=none
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#2e3248 ctermbg=0
'''

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
on_event = 'BufReadPost'
lua_add = '''
local cmp = require'cmp'

cmp.setup({
  enabled = true,
  mapping = cmp.mapping.preset.insert({
    ['<C-u>'] = cmp.mapping.scroll_docs(-4),
    ['<C-d>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<CR>'] = cmp.mapping.confirm({ select = true }),
    ['<Tab>'] = function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      else
        fallback()
      end
    end
  }),
  window = {
    completion = cmp.config.window.bordered(),
    documentation = cmp.config.window.bordered(),
  },
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'buffer' },
    { name = 'path' },
  }),
  formatting = {
    fields = { 'abbr', 'kind', 'menu' },
  },
})
'''
depends = ['cmp-nvim-lsp', 'cmp-buffer', 'cmp-path']

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'

[[plugins]]
repo = 'hrsh7th/cmp-buffer'

[[plugins]]
repo = 'hrsh7th/cmp-path'

