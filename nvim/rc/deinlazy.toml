[[plugins]]
repo = 'junegunn/fzf.vim'
# repo = 'artemave/fzf.vim'
on_cmd = [
  'Files',
  'ProjectFiles',
  'Buffers',
  'BLines',
  'History',
  'Tags',
  'BTags',
  'GFiles',
  'Ag',
  'Rg',
]
hook_add = '''
set rtp+=$XDG_CACHE_HOME/fzf
'''
hook_source = 'runtime! plugins/fzf.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
do = ':UpdateRemotePlugins'
hook_add = '''
nnoremap <silent> ,s :Defx -resume<CR>

function! s:previewWindowOpened() abort
  for nr in range(1, winnr('$'))
    if getwinvar(nr, "&pvw") == 1
      return 1
    endif
  endfor
  return 0
endfunction
'''
hook_source = '''
call defx#custom#option('_', {
      \ 'winwidth': 40,
      \ 'split': 'vertical',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 1,
      \ 'buffer_name': 'explorer',
      \ 'floating_preview': 1,
      \ 'vertical_preview': 1,
      \ 'preview_width': 80,
      \ })
augroup MyAutoCmd
  autocmd!
  autocmd VimEnter * Defx `system('git rev-parse --show-toplevel 2> /dev/null')[:-2]` -search=`expand('%:p')`
  autocmd VimEnter * Defx -toggle
  autocmd FileType defx call s:defx_my_settings()
  autocmd BufHidden \[defx\]* pclose
  autocmd WinEnter \[defx\]* if winnr('$') == 1 || winnr('$') == 2 && <SID>previewWindowOpened() | quit | endif
augroup END

function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ defx#is_directory() ?
        \  defx#do_action('open_or_close_tree') :
        \  defx#do_action('multi', ['drop', 'quit'])
  nnoremap <silent><buffer><expr> l
        \ defx#is_directory() ?
        \  defx#do_action('open_or_close_tree') :
        \  defx#do_action('multi', ['drop', 'quit'])
  nnoremap <silent><buffer><expr> c defx#do_action('copy')
  nnoremap <silent><buffer><expr> m defx#do_action('move')
  nnoremap <silent><buffer><expr> p defx#do_action('paste')
  nnoremap <silent><buffer><expr> E defx#do_action('drop', 'vsplit')
  nnoremap <silent><buffer><expr> P defx#do_action('preview')
  nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d defx#do_action('remove')
  nnoremap <silent><buffer><expr> r defx#do_action('rename')
  nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h defx#do_action('close_tree')
  nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
  nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
endfunction
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'chr4/nginx.vim'
on_ft = ['nginx']


[[plugins]]
repo = 'prettier/vim-prettier'
on_ft = ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx']
hook_source = '''
let g:prettier#autoformat = 1
let g:prettier#autoformat_require_pragma = 0
'''

