
# GitHubリポジトリにあるプラグインを利用する
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'justmao945/vim-clang'
filetypes  =  ['c', 'cpp']

[[plugins]]
repo = 'itchyny/lightline.vim'

# カーソル位置のコンテントの種類によってfiletypeを切り替える
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'AtsushiM/search-parent.vim'

# 必須プラグイン
[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_settings = {
\    'variables' : {
\        'lang' : 'ja',
\    },
\    'html' : {
\        'snippets'   : {
\            'html:5': "<!DOCTYPE html>\n"
\                    ."<html lang=\"${lang}\">\n"
\                    ."<meta charset=\"${charset}\">\n"
\                    ."<title></title>\n"
\                    ."${child}|\n",
\            'meta:ip': '<meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no">',
\        }
\    }
\}
'''

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
hook_add = '''
nnoremap <silent> ,f :<C-u>Denite file_rec -mode=normal<CR>
nnoremap <silent> ,b :<C-u>Denite buffer -mode=normal<CR>
nnoremap <silent> ,r :<C-u>Denite register -mode=normal<CR>
nnoremap <silent> ,m :<C-u>Denite file_mru -mode=normal<CR>
call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'pangloss/vim-javascript'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

[[plugins]]
repo = 'tomtom/tcomment_vim' # コメントアウト

[[plugins]]
repo = 'cohama/lexima.vim' # かっこの自動補完
hook_add = '''
function! s:as_list(a)
    return type(a:a) == type([]) ? a:a : [a:a]
endfunction
function! s:add_ignore_rule(rule)
    let rule = copy(a:rule)
    let rule.input = rule.char
    let rule.input_after = ""
    call lexima#add_rule(rule)
endfunction


function! s:add_rule(rule, ...)
    call lexima#add_rule(a:rule)
    if a:0 == 0
        return
    endif

    for ignore in s:as_list(a:1)
        call s:add_ignore_rule(extend(copy(a:rule), ignore))
    endfor
endfunction


" 第二引数に無視する条件の rule を渡す
call lexima#add_rule({'at': '\[\%#\]', 'char': '<Space>', 'leave': ' '})
call s:add_rule({'char': '(', 'input_after': ')'},[{'at': '\%#)'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '[', 'input_after': ']'},[{'at': '\%#)'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '{', 'input_after': '}'},[{'at': '\%#)'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '"', 'input_after': '"'},[{'at': '\%#)'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': "'", 'input_after': "'"},[{'at': '\%#)'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '`', 'input_after': '`'},[{'at': '\%#)'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
'''

# textobj を使いたい場合必要
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'nanotech/jellybeans.vim'
hook_add = '''
  set background=dark
  set cursorline
  hi CursorLine ctermfg=0 ctermbg=243
  hi Folded ctermfg=255 ctermbg=25
  autocmd MyAutoCmd VimEnter * nested colorscheme jellybeans
'''

# 末尾のスペースを可視化
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'vim-scripts/surround.vim'

[[plugins]]
repo = 'tpope/vim-eunuch'
