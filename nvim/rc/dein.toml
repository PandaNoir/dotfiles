# GitHubリポジトリにあるプラグインを利用する
[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'ghifarit53/tokyonight-vim'
hook_add = '''
let g:tokyonight_style = 'night'
let g:tokyonight_transparent_background = 1
autocmd MyAutoCmd VimEnter * nested colorscheme tokyonight
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \'colorscheme': 'tokyonight',
  \'component_function': {'coc': 'coc#status'},
  \ 'active': {
  \   'right': [['lineinfo', 'coc'], ['percent'],[ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex']]
  \ }
\}

let g:lightline.separator = {'left': "\ue0bc", 'right': "\ue0ba"}
let g:lightline.subseparator = {'left': "\ue0bd", 'right': "\ue0bb"}
'''


[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = '''
set signcolumn=yes
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<Tab>" :
  \ coc#refresh()

inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <C-k><C-g> :CocCommand eslint.executeAutofix
nmap <space>f <Plug>(coc-fix-current)

nnoremap <silent> K :call <SID>show_documentation()<CR>

set termguicolors
set pumblend=10
set winblend=10

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
'''

[[plugins]]
repo = 'cohama/lexima.vim' # かっこの自動補完
hook_add = '''
function! s:as_list(a)
  return type(a:a) == type([]) ? a:a : [a:a]
endfunction
function! s:add_ignore_rule(rule)
  let rule = copy(a:rule)
  let rule.input = rule.char
  let rule.input_after = ""
  call lexima#add_rule(rule)
endfunction

function! s:add_rule(rule, ...)
  call lexima#add_rule(a:rule)
  if a:0 == 0
    return
  endif

  for ignore in s:as_list(a:1)
    call s:add_ignore_rule(extend(copy(a:rule), ignore))
  endfor
endfunction

" 第二引数に無視する条件の rule を渡す
call lexima#add_rule({'at': '\[\%#\]', 'char': '<Space>', 'leave': ' '})
call s:add_rule({'char': '(', 'input_after': ')'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '[', 'input_after': ']'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '{', 'input_after': '}'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '`', 'input_after': '`'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'vim-scripts/surround.vim'

[[plugins]]
repo = 'tpope/vim-repeat'
hook_add = '''
" function s:execute_repeatable_macro(name) abort
function! Execute_repeatable_macro(name)
  const name = '@' .. a:name

  execute 'normal!' name
  silent! call repeat#set("\<Plug>macro_" .. a:name)
endfunction

for x in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
  execute 'nnoremap' '<silent>' ("<Plug>macro_" .. x) (":\<C-u>call Execute_repeatable_macro('" .. x .. "')\<CR>")
  execute 'nmap' ('@' .. x) ("<Plug>macro_" .. x)
endfor
'''

[[plugins]]
repo = 'justinmk/vim-sneak'
hook_add = '''
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
nmap : <Plug>Sneak_;
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
au MyAutoCmd VimEnter * nnoremap <silent> <Plug>RepeatTComment :TComment \| silent! call repeat#set("\<Plug>RepeatTComment")<CR>
au MyAutoCmd VimEnter * nmap <c-_><c-_> <Plug>RepeatTComment
'''

