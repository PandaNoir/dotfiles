[[plugins]]
repo = 'neovim/nvim-lspconfig'
hook_add = '''
set signcolumn=yes
lua << EOF
-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, bufopts)
  vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
  vim.keymap.set('n', '<space>r', vim.lsp.buf.rename, bufopts)
  vim.keymap.set('n', '<space>a', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
  vim.keymap.set('n', '<space>f', '<cmd>lua vim.lsp.buf.format({ async = true })<CR>', bufopts)

  
  vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
    vim.lsp.diagnostic.on_publish_diagnostics, { virtual_text = false }
  )
end

local nvim_lsp = require('lspconfig')
nvim_lsp.tsserver.setup{
  on_attach = on_attach,
  flags = lsp_flags,
  root_dir = nvim_lsp.util.root_pattern("package.json"),
}
nvim_lsp.rust_analyzer.setup{
  on_attach = on_attach,
}
nvim_lsp.denols.setup{
  on_attach = on_attach,
  root_dir = nvim_lsp.util.root_pattern("deno.json"),
  init_options = {
    lint = true,
    unstable = true,
    suggest = {
      imports = {
        hosts = {
          ["https://deno.land"] = true,
          ["https://cdn.nest.land"] = true,
          ["https://crux.land"] = true,
        },
      },
    },
  },
}
EOF
'''

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
hook_add = '''
lua << EOF
require("nvim-lsp-installer").setup({
    automatic_installation = true,
})
EOF
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'ghifarit53/tokyonight-vim'
hook_add = '''
let g:tokyonight_style = 'night'
let g:tokyonight_transparent_background = 1
autocmd MyAutoCmd VimEnter * nested colorscheme tokyonight
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \'colorscheme': 'tokyonight',
  \'component_function': {'coc': 'coc#status'},
  \ 'active': {
  \   'right': [['lineinfo', 'coc'], ['percent'],[ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex']]
  \ }
\}

let g:lightline.separator = {'left': "\ue0bc", 'right': "\ue0ba"}
let g:lightline.subseparator = {'left': "\ue0bd", 'right': "\ue0bb"}
'''

[[plugins]]
repo = 'cohama/lexima.vim' # かっこの自動補完
hook_add = '''
function! s:as_list(a)
  return type(a:a) == type([]) ? a:a : [a:a]
endfunction
function! s:add_ignore_rule(rule)
  let rule = copy(a:rule)
  let rule.input = rule.char
  let rule.input_after = ""
  call lexima#add_rule(rule)
endfunction

function! s:add_rule(rule, ...)
  call lexima#add_rule(a:rule)
  if a:0 == 0
    return
  endif

  for ignore in s:as_list(a:1)
    call s:add_ignore_rule(extend(copy(a:rule), ignore))
  endfor
endfunction

" 第二引数に無視する条件の rule を渡す
call lexima#add_rule({'at': '\[\%#\]', 'char': '<Space>', 'leave': ' '})
call s:add_rule({'char': '(', 'input_after': ')'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '[', 'input_after': ']'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '{', 'input_after': '}'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '`', 'input_after': '`'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'vim-scripts/surround.vim'

[[plugins]]
repo = 'tpope/vim-repeat'
hook_add = '''
" function s:execute_repeatable_macro(name) abort
function! Execute_repeatable_macro(name)
  const name = '@' .. a:name

  execute 'normal!' name
  silent! call repeat#set("\<Plug>macro_" .. a:name)
endfunction

for x in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
  execute 'nnoremap' '<silent>' ("<Plug>macro_" .. x) (":\<C-u>call Execute_repeatable_macro('" .. x .. "')\<CR>")
  execute 'nmap' ('@' .. x) ("<Plug>macro_" .. x)
endfor
'''

[[plugins]]
repo = 'justinmk/vim-sneak'
hook_add = '''
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
nmap : <Plug>Sneak_;
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
au MyAutoCmd VimEnter * nnoremap <silent> <Plug>RepeatTComment :TComment \| silent! call repeat#set("\<Plug>RepeatTComment")<CR>
au MyAutoCmd VimEnter * nmap <c-_><c-_> <Plug>RepeatTComment
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'

[[plugins]]
repo = 'Shougo/deoppet.nvim'
do = ':UpdateRemotePlugins'
hook_add = '''
call deoppet#initialize()
call deoppet#custom#option('snippets',
\ map(globpath(&runtimepath, 'neosnippets', 1, 1),
\     { _, val -> { 'path': val } }))

imap <C-k>  <Plug>(deoppet_expand)
imap <C-f>  <Plug>(deoppet_jump_forward)
imap <C-b>  <Plug>(deoppet_jump_backward)
smap <C-f>  <Plug>(deoppet_jump_forward)
smap <C-b>  <Plug>(deoppet_jump_backward)
'''

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc.vim'
hook_add = '''
" Change source options
call ddc#custom#patch_global('sources', ['around', 'nvim-lsp', 'deoppet'])
call ddc#custom#patch_global('sourceOptions', {
      \ '_': { 'matchers': ['matcher_head'] },
      \ 'deoppet': {'dup': v:true, 'mark': 'dp'},
      \ 'nvim-lsp': {
      \   'mark': 'L',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*' },
      \ })

" Use Customized labels
call ddc#custom#patch_global('sourceParams', {
      \ 'nvim-lsp': { 'kindLabels': { 'Class': 'c' } },
      \ })



" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ ddc#map#pum_visible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

call ddc#enable()
'''

