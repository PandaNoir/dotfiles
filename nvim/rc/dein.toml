# GitHubリポジトリにあるプラグインを利用する
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'neovim/nvim-lsp'
hook_add = '''
lua << EOF
local nvim_lsp = require'nvim_lsp'
nvim_lsp.cssls.setup{}
EOF
'''

# [[plugins]]
# repo = 'justmao945/vim-clang'
# filetypes  =  ['c', 'cpp']

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = { 'colorscheme': 'iceberg' }
let g:lightline.separator = {'left': "\ue0b0", 'right': "\ue0b2"}
let g:lightline.subseparator = {'left': "\ue0b1", 'right': "\ue0b3"}
'''


# カーソル位置のコンテントの種類によってfiletypeを切り替える
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

# 必須プラグイン

# [[plugins]]
# repo = 'rking/ag.vim'



[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'cohama/lexima.vim' # かっこの自動補完
hook_add = '''
function! s:as_list(a)
    return type(a:a) == type([]) ? a:a : [a:a]
endfunction
function! s:add_ignore_rule(rule)
    let rule = copy(a:rule)
    let rule.input = rule.char
    let rule.input_after = ""
    call lexima#add_rule(rule)
endfunction


function! s:add_rule(rule, ...)
    call lexima#add_rule(a:rule)
    if a:0 == 0
        return
    endif

    for ignore in s:as_list(a:1)
        call s:add_ignore_rule(extend(copy(a:rule), ignore))
    endfor
endfunction


" 第二引数に無視する条件の rule を渡す
call lexima#add_rule({'at': '\[\%#\]', 'char': '<Space>', 'leave': ' '})
call s:add_rule({'char': '(', 'input_after': ')'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '[', 'input_after': ']'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '{', 'input_after': '}'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
" call s:add_rule({'char': '"', 'input_after': '"'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
" call s:add_rule({'char': "'", 'input_after': "'"},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '`', 'input_after': '`'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
'''

# textobj を使いたい場合必要
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'nanotech/jellybeans.vim'
hook_add = '''
set cursorline
set pumblend=10
hi NormalFloat guibg=#2a2a2a

augroup transparent-windows
  autocmd!
  autocmd FileType denite set winblend=10
  autocmd FileType denite-filter set winblend=10
augroup END
let g:jellybeans_overrides = {
          " \    'background': { 'ctermbg': '0', '256ctermbg': '0' },
          \    'background': { 'ctermbg': 'NONE', '256ctermbg': 'NONE' },
          \    'CursorLine': { 'guibg': '2f2f2f' },
          \}
if has('termguicolors') && &termguicolors
  let g:jellybeans_overrides['background']['guibg'] = 'NONE'
endif

autocmd MyAutoCmd VimEnter * nested colorscheme jellybeans
'''

# 末尾のスペースを可視化
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'vim-scripts/surround.vim'

[[plugins]]
repo = 'tpope/vim-repeat'
hook_add = '''
" function s:execute_repeatable_macro(name) abort
function! Execute_repeatable_macro(name)
  const name = '@' .. a:name

  execute 'normal!' name
  silent! call repeat#set("\<Plug>macro_" .. a:name)
endfunction

for x in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
  execute 'nnoremap' '<silent>' ("<Plug>macro_" .. x) (":\<C-u>call Execute_repeatable_macro('" .. x .. "')\<CR>")
  execute 'nmap' ('@' .. x) ("<Plug>macro_" .. x)
endfor
'''

[[plugins]]
repo = 'tpope/vim-eunuch'

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
au MyAutoCmd VimEnter * nnoremap <silent> <Plug>RepeatTComment :TComment \| silent! call repeat#set("\<Plug>RepeatTComment")<CR>
au MyAutoCmd VimEnter * nmap <c-_><c-_> <Plug>RepeatTComment
'''
