# GitHubリポジトリにあるプラグインを利用する
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# [[plugins]]
# repo = 'justmao945/vim-clang'
# filetypes  =  ['c', 'cpp']

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'itchyny/lightline.vim'

# カーソル位置のコンテントの種類によってfiletypeを切り替える
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'AtsushiM/search-parent.vim'

# 必須プラグイン
[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_settings = {
\    'variables' : {
\        'lang' : 'ja',
\    },
\    'html' : {
\        'snippets'   : {
\            'html:5': "<!DOCTYPE html>\n"
\                    ."<html lang=\"${lang}\">\n"
\                    ."<meta charset=\"${charset}\">\n"
\                    ."<title></title>\n"
\                    ."${child}|\n",
\            'meta:ip': '<meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no">',
\        }
\    }
\}
'''

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
hook_add = '''
" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q denite#do_map('quit')
  nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
endfunction

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
endfunction

" Change file/rec command.
call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

" Add custom menus
let s:menus = {}

let s:menus.zsh = { 'description': 'Edit your import zsh configuration' }
let s:menus.zsh.file_candidates = [
    \ ['zshrc', '~/.zshrc'],
    \ ['zshenv', '~/.zshenv'],
    \ ]

let s:menus.my_commands = { 'description': 'Example commands' }
let s:menus.my_commands.command_candidates = [
    \ ['Split the window', 'vnew'],
    \ ['Open zsh menu', 'Denite menu:zsh'],
    \ ['Format code', 'FormatCode', 'go,python'],
    \ ]

call denite#custom#var('menu', 'menus', s:menus)

" Ag command on grep source
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Define alias
call denite#custom#alias('source', 'file/rec/git', 'file/rec')
call denite#custom#var('file/rec/git', 'command', ['git', 'ls-files', '-co', '--exclude-standard'])

call denite#custom#alias('source', 'file/rec/py', 'file/rec')
call denite#custom#var('file/rec/py', 'command', ['scantree.py'])

" Change ignore_globs
call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', ['.git/', '.ropeproject/', '__pycache__/', 'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

" Custom action
" Note: lambda function is not supported in Vim8.
call denite#custom#action('file', 'test', {context -> execute('let g:foo = 1')})
call denite#custom#action('file', 'test2', {context -> denite#do_action(context, 'open', context['targets'])})

" enable floating window
let s:denite_win_width_percent = 0.85
let s:denite_win_height_percent = 0.7
call denite#custom#option('default', {
    \ 'split': 'floating',
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ })



nnoremap <silent> ,f :<C-u>Denite file/rec -start-filter<CR>
nnoremap <silent> ,b :<C-u>Denite buffer<CR>
nnoremap <silent> ,r :<C-u>Denite register<CR>
nnoremap <silent> ,m :<C-u>Denite file_mru<CR>

'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'vim-ruby/vim-ruby'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'pangloss/vim-javascript'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

[[plugins]]
repo = 'tomtom/tcomment_vim' # コメントアウト

[[plugins]]
repo = 'cohama/lexima.vim' # かっこの自動補完
hook_add = '''
function! s:as_list(a)
    return type(a:a) == type([]) ? a:a : [a:a]
endfunction
function! s:add_ignore_rule(rule)
    let rule = copy(a:rule)
    let rule.input = rule.char
    let rule.input_after = ""
    call lexima#add_rule(rule)
endfunction


function! s:add_rule(rule, ...)
    call lexima#add_rule(a:rule)
    if a:0 == 0
        return
    endif

    for ignore in s:as_list(a:1)
        call s:add_ignore_rule(extend(copy(a:rule), ignore))
    endfor
endfunction


" 第二引数に無視する条件の rule を渡す
call lexima#add_rule({'at': '\[\%#\]', 'char': '<Space>', 'leave': ' '})
call s:add_rule({'char': '(', 'input_after': ')'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '[', 'input_after': ']'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '{', 'input_after': '}'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '"', 'input_after': '"'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': "'", 'input_after': "'"},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
call s:add_rule({'char': '`', 'input_after': '`'},[{'at': '\%#\w'},{'syntax' : 'Comment'},{'syntax' : 'String'}])
'''

# textobj を使いたい場合必要
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'nanotech/jellybeans.vim'
hook_add = '''
  set cursorline
  let g:jellybeans_overrides = {
              \    'background': { 'ctermbg': 'none', '256ctermbg': 'none' },
              \    'CursorLine': { 'guibg': '2f2f2f' },
              \}
  if has('termguicolors') && &termguicolors
      let g:jellybeans_overrides['background']['guibg'] = 'none'
  endif
  autocmd MyAutoCmd VimEnter * nested colorscheme jellybeans
'''

# 末尾のスペースを可視化
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'vim-scripts/surround.vim'

[[plugins]]
repo = 'tpope/vim-eunuch'
